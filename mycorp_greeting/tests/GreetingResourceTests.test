<?php

/**
 * @file
 * Call the greeting endpoint tests.
 *
 */


/**
 * Run test cases for the greeting resource endpoints.
 *
 */
class GreetingResourceTests extends ServicesWebTestCase {
  // Class variables
  protected $privilegedUser = NULL ;
  protected $endpoint = NULL;

  /**
   * {@inheritdoc}
   */
  public function setUp(array $modules = array()) {
    $modules[] = 'greetings_feature';
    $modules[] = 'mycorp_greeting';
    parent::setUp($modules);

    $this->endpoint =  $this->saveGreetingEndpoint();
  }

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Greeting Resource',
      'description' => 'Test the Greeting resource methods and actions.',
      'group' => 'Greeting',
      'dependencies' => array('ctools', 'libraries'),
    );
  }

  /**
   * testing greeting_resource Get
   */
  public function testNewEndpointGreetingGet() {
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer services',
    ));
    $this->drupalLogin($this->privilegedUser);
    $node = $this->drupalCreateNode(['type' => 'greeting']);
    $responseArray = $this->servicesGet($this->endpoint->path . '/greetings/' . $node->nid);
    $this->assertTrue($node->title == $responseArray['body']->title,
      'Successfully received Greeting info', 'GreetingResource: Retrieve');
    //Verify node not found.
    unset($node);
    $responseArray = $this->servicesGet($this->endpoint->path . '/greetings/33');
    $this->assertTrue($responseArray['code'] == '404', 'Successfully was rejected to non existent greeting', 'GreetingResource: Retrieve');
  }

  /**
   * Implements hook_default_services_endpoint().
   */
  public function saveGreetingEndpoint() {

    $endpoint = new stdClass();
    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
    $endpoint->api_version = 3;
    $endpoint->name = 'greetings';
    $endpoint->server = 'rest_server';
    $endpoint->path = 'api/v1';
    $endpoint->authentication = array(
      'services' => 'services',
    );
    $endpoint->server_settings = array(
      'formatters' => array(
        'json' => TRUE,
        'bencode' => FALSE,
        'jsonp' => FALSE,
        'php' => TRUE,
        'xml' => FALSE,
      ),
      'parsers' => array(
        'application/json' => TRUE,
        'application/x-www-form-urlencoded' => TRUE,
        'multipart/form-data' => TRUE,
        'application/xml' => FALSE,
        'text/xml' => FALSE,
      ),
    );
    $endpoint->resources = array(
      'greetings' => array(
        'operations' => array(
          'retrieve' => array(
            'enabled' => '1',
          ),
          'create' => array(
            'enabled' => '1',
          ),
          'update' => array(
            'enabled' => '1',
          ),
          'delete' => array(
            'enabled' => '1',
          ),
          'index' => array(
            'enabled' => '1',
          ),
        ),
        'targeted_actions' => array(
          'publish' => array(
            'enabled' => '1',
          ),
        ),
      ),
      'user' => array(
        'actions' => array(
          'login' => array(
            'enabled' => '1',
            'settings' => array(
              'services' => array(
                'resource_api_version' => '1.0',
              ),
            ),
          ),
          'logout' => array(
            'enabled' => '1',
            'settings' => array(
              'services' => array(
                'resource_api_version' => '1.0',
              ),
            ),
          ),
          'token' => array(
            'enabled' => '1',
          ),
        ),
      ),
    );
    $endpoint->export_type = FALSE;
    services_endpoint_save($endpoint);
    $endpoint = services_endpoint_load($endpoint->name);
    $this->assertTrue($endpoint->name == 'greetings', 'Endpoint successfully created');
    return $endpoint;
  }


}

